// This example contains basic Hello World like OOP

// In Saturnus, inheritance is disabled by design.
// Use composition instead.
class Greeter {
  let name = "";
  
  // A simple method:
  fn greet(self) {
    return "Hello " ++ self.name ++ "!";
  }

  // Static methods just don't use the "self" param:
  fn new(name) {
    return Greeter { name };
  }
}

// Test it out!
let world = Greeter.new("World");
print(world->greet());

// Quick extras:
class Mod {
  fn static_method(*args) {
    print("Static method!!!", #? args);
  }
}
fn another_thing(*args) {
  print("Static function!", #? args);
}

let { static_method } = Mod; // by reference.

// These three have the exact same behaviour:
Mod.static_method(1, 2, 3);
static_method(1, 2, 3);
another_thing(1, 2, 3);

// This may also come handy:
class TestSelf {
  fn new(name) {
    // "Self" is a local variable available in static methods, referencing the
    // class itself. Here is the same as typing "return TestSelf { name };"
    return Self { name };
  }
  fn print(self) {
    print("I am " ++ self.name);
  }
}

let ts = TestSelf.new("Self tester!");
ts->print();
