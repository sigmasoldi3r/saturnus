/*
    Saturnus Standard Library
*/

// Runtime
fn panic(message) {
  <extern "Lua">
    error(message);
  </extern>
}

let private = {};

class Vector {
  fn new(data) {
    return Vector { [private]: { data } };
  }
  fn at(self, key) {
    return self[private].data[key + 1];
  }
  fn set(self, key, value) {
    self[private].data[key] = value;
  }
  fn pop(self) {
    if self.len() > 0 {
      let value = self[private].data[#? self[private].data];
      self[private].data[#? self[private].data] = ();
      return value;
    }
    return ();
  }
  fn push(self, value) {
    self[private].data[#? self[private].data + 1] = value;
  }
  fn len(self) {
    return #? self[private].data;
  }
  fn iter(self) {
    return Object.entries(self[private].data);
  }
}

class Object {
  fn entries(tbl) {
    <extern "Lua">
      do
        local iter = pairs(tbl);
        return function(_, next)
          local k, v = iter(tbl, next and next._0);
          if k ~= nil and v ~= nil then
            return { _0 = k, _1 = v }, v;
          end
        end;
      end
    </extern>
    panic("Object.entries() not supported on this platform!");
  }
  fn keys(tbl) {
    <extern "Lua">
      do
        return pairs(tbl);
      end
    </extern>
    panic("Object.keys() not supported on this platform!");
  }
}

class Tuple {
  fn new(data) {
    return Vector { [private]: { data } };
  }
  fn at(self, key) {
    return self[private].data[key];
  }
  fn set(self, key, value) {
    self[private].data[key] = value;
  }
  fn len(self) {
    return #? self[private].data;
  }
  fn iter(self) {
    return Object.entries(self[private].data);
  }
}

let ext = {
  fn split(sep) = (self) => {
    sep = sep ?? "%s";
    let t = [];
    for frag in self->gmatch("([^" ++ sep ++ "]+)") {
      t[#?t+1] = frag;
    }
    return t;
  };
  fn join(sep) = (self) => table.concat(self, sep);
  fn map(f) = (self) => {
    let t = [];
    for (k, v) in Object.entries(self) {
      t[k] = f(v, k, self);
    }
    return t;
  };
  fn reduce(f, seed) = (self) => {
    for (k, v) in Object.entries(self) {
      seed = f(seed, v, k, self);
    }
    return seed;
  };
  return {
    split,
    join,
    map,
    reduce
  };
};

// The RTTI module
class rtti {
  fn arguments(*args) {
    return (target, name) => {
      // TODO: Implement arguments typecheck decorator.
    };
  }
}

// OOP and inheritance
let makeTrait = (name) => () => panic("Trait " ++ name ++ " is not constructible!");

fn trait() {
  return (target, name) => {
    target.__meta__.__call = makeTrait(name);
  };
}

fn impl(trait) {
  return (target, name) => {
    let map = {};
    for (k, v) in Object.entries(target.prototype) {
      map[k] = v;
    }
    for (k, v) in Object.entries(trait.prototype) {
      if map[k] == () {
        panic(name ++ " must implement trait method " ++ k ++ "!");
      }
    }
  };
}

fn mixin(parent) {
  let index = parent.prototype.__meta__.__index;
  if type(index) == "table" {
    index = (self, key) => parent.prototype.__meta__.__index[key];
  }
  return (target, name) => {
    let prev = target.prototype.__meta__.__index;
    if type(prev) == "table" {
      let prev_tbl = prev;
      prev = (self, key) => prev_tbl[key];
    }
    target.prototype.__meta__.__index = (self, key) => {
      return prev(self, key) or index(self, key);
    };
  };
}

let makePure = (name) => () => panic("Attempting to call abstract method " ++ name ++ "!");

fn abstract() {
  return (_, name, host, label, meta) => {
    if meta.is_static {
      host[name] = makePure(label ++ "::" ++ name);
    } else {
      host.prototype[name] = makePure(label ++ "." ++ name);
    }
  };
}

// STD Custom operators
fn `|>`(left, right) =  right(left);
fn `<|`(left, right) =  left(right);

fn `::`(arr, elem) {
  <extern "Lua">
    do
      table.insert(arr, elem);
      return arr;
    end
  </extern>
  panic("Operator :: not supported on this platform");
}

fn `:::`(left, right) {
  <extern "Lua">
    do
      local tbl = {};
      for _, v in pairs(left) do
        tbl[#tbl + 1] = v;
      end
      for _, v in pairs(right) do
        tbl[#tbl + 1] = v;
      end
      return tbl;
    end
  </extern>
  panic("Operator ::: not supported on this platform");
}

fn `+?`(left, right) =  left and (left + right);
fn `+??`(left, right) =  left and (left + right) or right;

fn `++?`(left, right) =  left and (left ++ right);
fn `++??`(left, right) =  left and (left ++ right) or right;

fn `-?`(left, right) =  left and (left - right);
fn `-??`(left, right) =  left and (left - right) or right;

fn `*?`(left, right) =  left and (left * right);
fn `*??`(left, right) =  left and (left * right) or right;

fn `/?`(left, right) =  left and (left / right);
fn `/??`(left, right) =  left and (left / right) or right;

fn forward_iterator(from, to, step) {
  let i = from;
  return () => {
    if i > to {
      return ();
    }
    let c = i;
    i += step;
    return c;
  };
}

fn backward_iterator(from, to, step) {
  let i = from;
  return () => {
    if i < to {
      return ();
    }
    let c = i;
    i -= step;
    return c;
  };

}

fn `..`(from, target) {
  let (to, step) = {
    if type(target) == "table" {
      return target;
    }
    return (target, 1);
  };
  if from < to {
    return forward_iterator(from, to, step);
  }
  return backward_iterator(from, to, step);
}

fn `->>`(self, method) = method(self);

return {
  Object,
  Tuple,
  Vector,
  abstract,
  trait,
  impl,
  mixin,
  panic,
  rtti,
  operators: {
    `:::`, `..`,  `|>`,  `<|`,
    `+?`,  `+??`, `++?`, `++??`,
    `-?`,  `-??`, `*?`,  `*??`,
    `/?`,  `/??`, `::`, `->>`
  },
  ext
};
